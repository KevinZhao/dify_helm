name: Release Charts

on:
  push:
    branches:
      - main

# 这里添加权限设置以允许GitHub Actions写入仓库和部署Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
        
      # Update Helm dependencies (but only download those marked as embedded)
      - name: Update Helm dependencies
        run: |
          # 先更新所有依赖
          helm dependency update .
          
          # 读取values.yaml中的embedded设置，删除未嵌入的依赖
          echo "检查和清理外部依赖..."
          
          # 检查redis是否为外部依赖
          REDIS_EMBEDDED=$(grep -A1 "redis:" values.yaml | grep "embedded" | awk '{print $2}')
          if [ "$REDIS_EMBEDDED" = "false" ]; then
            echo "Redis设置为外部依赖，移除下载的chart包"
            rm -f charts/redis-*.tgz || true
          fi
          
          # 检查postgresql是否为外部依赖
          PG_EMBEDDED=$(grep -A1 "postgresql:" values.yaml | grep "embedded" | awk '{print $2}')
          if [ "$PG_EMBEDDED" = "false" ]; then
            echo "PostgreSQL设置为外部依赖，移除下载的chart包"
            rm -f charts/postgresql-*.tgz || true
          fi
          
          # 检查minio是否为外部依赖
          MINIO_EMBEDDED=$(grep -A1 "minio:" values.yaml | grep "embedded" | awk '{print $2}')
          if [ "$MINIO_EMBEDDED" = "false" ]; then
            echo "MinIO设置为外部依赖，移除下载的chart包"
            rm -f charts/minio-*.tgz || true
          fi
          
          echo "剩余的嵌入依赖包："
          ls -la charts/ || echo "没有嵌入的依赖包"

      # 现在依赖已被标记为可选，不再需要--dependency-update=false参数
      - name: Package Helm Chart
        run: |
          helm package .
          
      - name: Update index.yaml
        run: |
          helm repo index --url https://kevinzhao.github.io/dify_helm .
      
      - name: Confirm file existence before deployment
        run: |
          echo "检查chart包是否存在..."
          ls -la dify-*.tgz || echo "主Chart包不存在!"
          echo "检查依赖包是否存在..."
          ls -la charts/*.tgz || echo "依赖Chart包不存在或目录为空!"
          
      - name: Create deployment folder
        run: |
          mkdir -p deployment
          cp index.yaml deployment/
          cp dify-*.tgz deployment/ || echo "警告: 未找到主Chart包"
          # 确保依赖chart目录存在并复制依赖chart包
          if [ -d "charts" ] && [ "$(ls -A charts)" ]; then
            echo "复制依赖chart包..."
            mkdir -p deployment/charts
            cp -r charts/*.tgz deployment/charts/
          else
            echo "charts目录不存在或为空，创建空目录..."
            mkdir -p deployment/charts
          fi
          
      - name: Verify deployment directory content
        run: |
          echo "部署目录内容:"
          find deployment -type f | sort

      - name: Setup Pages
        uses: actions/configure-pages@v3

      - name: Deploy to GitHub Pages
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: deployment
          branch: gh-pages
          clean: true
          token: ${{ secrets.GITHUB_TOKEN }}
